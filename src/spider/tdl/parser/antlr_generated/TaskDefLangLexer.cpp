
#include <memory>
#include <utility>
#include <vector>

#include <spider/tdl/parser/ast/FloatSpec.hpp>
#include <spider/tdl/parser/ast/IntSpec.hpp>
#include <spider/tdl/parser/ast/nodes.hpp>
#include <spider/tdl/parser/Exception.hpp>
#include <spider/tdl/parser/SourceLocation.hpp>


// Generated from tdl/parser/TaskDefLang.g4 by ANTLR 4.13.2


#include "TaskDefLangLexer.h"


using namespace antlr4;

using namespace spider::tdl::parser::antlr_generated;


using namespace antlr4;

namespace {

struct TaskDefLangLexerStaticData final {
  TaskDefLangLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  TaskDefLangLexerStaticData(const TaskDefLangLexerStaticData&) = delete;
  TaskDefLangLexerStaticData(TaskDefLangLexerStaticData&&) = delete;
  TaskDefLangLexerStaticData& operator=(const TaskDefLangLexerStaticData&) = delete;
  TaskDefLangLexerStaticData& operator=(TaskDefLangLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag taskdeflanglexerLexerOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
std::unique_ptr<TaskDefLangLexerStaticData> taskdeflanglexerLexerStaticData = nullptr;

void taskdeflanglexerLexerInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (taskdeflanglexerLexerStaticData != nullptr) {
    return;
  }
#else
  assert(taskdeflanglexerLexerStaticData == nullptr);
#endif
  auto staticData = std::make_unique<TaskDefLangLexerStaticData>(
    std::vector<std::string>{
      "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
      "T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
      "T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "SPACE", "COMMENT", 
      "RESERVED_CONTROL_FLOW_WORDS", "RESERVED_DEF_WORDS", "RESERVED_TYPE_AND_STORAGE_WORDS", 
      "RESERVED_ERROR_HANDLING_WORDS", "RESERVED_ACCESS_CONTROL_WORDS", 
      "RESERVED_OTHER_WORDS", "ID"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'namespace'", "'{'", "'}'", "'fn'", "'('", "')'", "';'", "'->'", 
      "':'", "','", "'struct'", "'List'", "'<'", "'>'", "'Map'", "'Tuple'", 
      "'int8'", "'int16'", "'int32'", "'int64'", "'float'", "'double'", 
      "'bool'"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "SPACE", "COMMENT", "RESERVED_CONTROL_FLOW_WORDS", 
      "RESERVED_DEF_WORDS", "RESERVED_TYPE_AND_STORAGE_WORDS", "RESERVED_ERROR_HANDLING_WORDS", 
      "RESERVED_ACCESS_CONTROL_WORDS", "RESERVED_OTHER_WORDS", "ID"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,32,622,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
  	0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,7,
  	1,8,1,8,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,
  	1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,
  	1,15,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,
  	1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,
  	1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,
  	1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,5,24,171,8,24,10,24,12,24,174,
  	9,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,
  	1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,
  	1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,
  	1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,
  	1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,3,25,240,8,25,1,26,1,26,
  	1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,
  	1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,
  	1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,
  	1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,
  	1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,3,26,310,8,26,1,27,
  	1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,
  	1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,
  	1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,
  	1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,
  	1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,
  	1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,
  	1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,
  	1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,
  	1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,
  	1,27,1,27,1,27,1,27,1,27,1,27,3,27,445,8,27,1,28,1,28,1,28,1,28,1,28,
  	1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,
  	1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,
  	1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,3,28,490,8,28,1,29,
  	1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,
  	1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,
  	1,29,1,29,1,29,1,29,1,29,1,29,1,29,3,29,528,8,29,1,30,1,30,1,30,1,30,
  	1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,
  	1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,
  	1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,
  	1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,
  	1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,
  	1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,3,30,614,8,30,1,31,
  	1,31,5,31,618,8,31,10,31,12,31,621,9,31,0,0,32,1,1,3,2,5,3,7,4,9,5,11,
  	6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,
  	37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,
  	30,61,31,63,32,1,0,4,3,0,9,10,13,13,32,32,2,0,10,10,13,13,3,0,65,90,95,
  	95,97,122,4,0,48,57,65,90,95,95,97,122,699,0,1,1,0,0,0,0,3,1,0,0,0,0,
  	5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,
  	0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,
  	0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,
  	1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,
  	0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,
  	0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,1,65,1,0,0,0,3,75,1,0,0,0,5,77,
  	1,0,0,0,7,79,1,0,0,0,9,82,1,0,0,0,11,84,1,0,0,0,13,86,1,0,0,0,15,88,1,
  	0,0,0,17,91,1,0,0,0,19,93,1,0,0,0,21,95,1,0,0,0,23,102,1,0,0,0,25,107,
  	1,0,0,0,27,109,1,0,0,0,29,111,1,0,0,0,31,115,1,0,0,0,33,121,1,0,0,0,35,
  	126,1,0,0,0,37,132,1,0,0,0,39,138,1,0,0,0,41,144,1,0,0,0,43,150,1,0,0,
  	0,45,157,1,0,0,0,47,162,1,0,0,0,49,166,1,0,0,0,51,239,1,0,0,0,53,309,
  	1,0,0,0,55,444,1,0,0,0,57,489,1,0,0,0,59,527,1,0,0,0,61,613,1,0,0,0,63,
  	615,1,0,0,0,65,66,5,110,0,0,66,67,5,97,0,0,67,68,5,109,0,0,68,69,5,101,
  	0,0,69,70,5,115,0,0,70,71,5,112,0,0,71,72,5,97,0,0,72,73,5,99,0,0,73,
  	74,5,101,0,0,74,2,1,0,0,0,75,76,5,123,0,0,76,4,1,0,0,0,77,78,5,125,0,
  	0,78,6,1,0,0,0,79,80,5,102,0,0,80,81,5,110,0,0,81,8,1,0,0,0,82,83,5,40,
  	0,0,83,10,1,0,0,0,84,85,5,41,0,0,85,12,1,0,0,0,86,87,5,59,0,0,87,14,1,
  	0,0,0,88,89,5,45,0,0,89,90,5,62,0,0,90,16,1,0,0,0,91,92,5,58,0,0,92,18,
  	1,0,0,0,93,94,5,44,0,0,94,20,1,0,0,0,95,96,5,115,0,0,96,97,5,116,0,0,
  	97,98,5,114,0,0,98,99,5,117,0,0,99,100,5,99,0,0,100,101,5,116,0,0,101,
  	22,1,0,0,0,102,103,5,76,0,0,103,104,5,105,0,0,104,105,5,115,0,0,105,106,
  	5,116,0,0,106,24,1,0,0,0,107,108,5,60,0,0,108,26,1,0,0,0,109,110,5,62,
  	0,0,110,28,1,0,0,0,111,112,5,77,0,0,112,113,5,97,0,0,113,114,5,112,0,
  	0,114,30,1,0,0,0,115,116,5,84,0,0,116,117,5,117,0,0,117,118,5,112,0,0,
  	118,119,5,108,0,0,119,120,5,101,0,0,120,32,1,0,0,0,121,122,5,105,0,0,
  	122,123,5,110,0,0,123,124,5,116,0,0,124,125,5,56,0,0,125,34,1,0,0,0,126,
  	127,5,105,0,0,127,128,5,110,0,0,128,129,5,116,0,0,129,130,5,49,0,0,130,
  	131,5,54,0,0,131,36,1,0,0,0,132,133,5,105,0,0,133,134,5,110,0,0,134,135,
  	5,116,0,0,135,136,5,51,0,0,136,137,5,50,0,0,137,38,1,0,0,0,138,139,5,
  	105,0,0,139,140,5,110,0,0,140,141,5,116,0,0,141,142,5,54,0,0,142,143,
  	5,52,0,0,143,40,1,0,0,0,144,145,5,102,0,0,145,146,5,108,0,0,146,147,5,
  	111,0,0,147,148,5,97,0,0,148,149,5,116,0,0,149,42,1,0,0,0,150,151,5,100,
  	0,0,151,152,5,111,0,0,152,153,5,117,0,0,153,154,5,98,0,0,154,155,5,108,
  	0,0,155,156,5,101,0,0,156,44,1,0,0,0,157,158,5,98,0,0,158,159,5,111,0,
  	0,159,160,5,111,0,0,160,161,5,108,0,0,161,46,1,0,0,0,162,163,7,0,0,0,
  	163,164,1,0,0,0,164,165,6,23,0,0,165,48,1,0,0,0,166,167,5,47,0,0,167,
  	168,5,47,0,0,168,172,1,0,0,0,169,171,8,1,0,0,170,169,1,0,0,0,171,174,
  	1,0,0,0,172,170,1,0,0,0,172,173,1,0,0,0,173,175,1,0,0,0,174,172,1,0,0,
  	0,175,176,6,24,0,0,176,50,1,0,0,0,177,178,5,105,0,0,178,240,5,102,0,0,
  	179,180,5,101,0,0,180,181,5,108,0,0,181,182,5,115,0,0,182,240,5,101,0,
  	0,183,184,5,115,0,0,184,185,5,119,0,0,185,186,5,105,0,0,186,187,5,116,
  	0,0,187,188,5,99,0,0,188,240,5,104,0,0,189,190,5,99,0,0,190,191,5,97,
  	0,0,191,192,5,115,0,0,192,240,5,101,0,0,193,194,5,119,0,0,194,195,5,104,
  	0,0,195,196,5,105,0,0,196,197,5,108,0,0,197,240,5,101,0,0,198,199,5,102,
  	0,0,199,200,5,111,0,0,200,240,5,114,0,0,201,202,5,108,0,0,202,203,5,111,
  	0,0,203,204,5,111,0,0,204,240,5,112,0,0,205,206,5,100,0,0,206,240,5,111,
  	0,0,207,208,5,98,0,0,208,209,5,114,0,0,209,210,5,101,0,0,210,211,5,97,
  	0,0,211,240,5,107,0,0,212,213,5,99,0,0,213,214,5,111,0,0,214,215,5,110,
  	0,0,215,216,5,116,0,0,216,217,5,105,0,0,217,218,5,110,0,0,218,219,5,117,
  	0,0,219,240,5,101,0,0,220,221,5,114,0,0,221,222,5,101,0,0,222,223,5,116,
  	0,0,223,224,5,117,0,0,224,225,5,114,0,0,225,240,5,110,0,0,226,227,5,103,
  	0,0,227,228,5,111,0,0,228,229,5,116,0,0,229,240,5,111,0,0,230,231,5,112,
  	0,0,231,232,5,97,0,0,232,233,5,115,0,0,233,240,5,115,0,0,234,235,5,121,
  	0,0,235,236,5,105,0,0,236,237,5,101,0,0,237,238,5,108,0,0,238,240,5,100,
  	0,0,239,177,1,0,0,0,239,179,1,0,0,0,239,183,1,0,0,0,239,189,1,0,0,0,239,
  	193,1,0,0,0,239,198,1,0,0,0,239,201,1,0,0,0,239,205,1,0,0,0,239,207,1,
  	0,0,0,239,212,1,0,0,0,239,220,1,0,0,0,239,226,1,0,0,0,239,230,1,0,0,0,
  	239,234,1,0,0,0,240,52,1,0,0,0,241,242,5,99,0,0,242,243,5,108,0,0,243,
  	244,5,97,0,0,244,245,5,115,0,0,245,310,5,115,0,0,246,247,5,115,0,0,247,
  	248,5,116,0,0,248,249,5,114,0,0,249,250,5,117,0,0,250,251,5,99,0,0,251,
  	310,5,116,0,0,252,253,5,101,0,0,253,254,5,110,0,0,254,255,5,117,0,0,255,
  	310,5,109,0,0,256,257,5,117,0,0,257,258,5,110,0,0,258,259,5,105,0,0,259,
  	260,5,111,0,0,260,310,5,110,0,0,261,262,5,105,0,0,262,263,5,110,0,0,263,
  	264,5,116,0,0,264,265,5,101,0,0,265,266,5,114,0,0,266,267,5,102,0,0,267,
  	268,5,97,0,0,268,269,5,99,0,0,269,310,5,101,0,0,270,271,5,110,0,0,271,
  	272,5,97,0,0,272,273,5,109,0,0,273,274,5,101,0,0,274,275,5,115,0,0,275,
  	276,5,112,0,0,276,277,5,97,0,0,277,278,5,99,0,0,278,310,5,101,0,0,279,
  	280,5,117,0,0,280,281,5,115,0,0,281,282,5,105,0,0,282,283,5,110,0,0,283,
  	310,5,103,0,0,284,285,5,116,0,0,285,286,5,121,0,0,286,287,5,112,0,0,287,
  	288,5,101,0,0,288,289,5,100,0,0,289,290,5,101,0,0,290,310,5,102,0,0,291,
  	292,5,100,0,0,292,293,5,101,0,0,293,310,5,102,0,0,294,295,5,108,0,0,295,
  	296,5,101,0,0,296,310,5,116,0,0,297,298,5,109,0,0,298,299,5,111,0,0,299,
  	300,5,100,0,0,300,301,5,117,0,0,301,302,5,108,0,0,302,310,5,101,0,0,303,
  	304,5,105,0,0,304,305,5,109,0,0,305,306,5,112,0,0,306,307,5,111,0,0,307,
  	308,5,114,0,0,308,310,5,116,0,0,309,241,1,0,0,0,309,246,1,0,0,0,309,252,
  	1,0,0,0,309,256,1,0,0,0,309,261,1,0,0,0,309,270,1,0,0,0,309,279,1,0,0,
  	0,309,284,1,0,0,0,309,291,1,0,0,0,309,294,1,0,0,0,309,297,1,0,0,0,309,
  	303,1,0,0,0,310,54,1,0,0,0,311,312,5,105,0,0,312,313,5,110,0,0,313,445,
  	5,116,0,0,314,315,5,108,0,0,315,316,5,111,0,0,316,317,5,110,0,0,317,445,
  	5,103,0,0,318,319,5,115,0,0,319,320,5,104,0,0,320,321,5,111,0,0,321,322,
  	5,114,0,0,322,445,5,116,0,0,323,324,5,98,0,0,324,325,5,121,0,0,325,326,
  	5,116,0,0,326,445,5,101,0,0,327,328,5,115,0,0,328,329,5,105,0,0,329,330,
  	5,103,0,0,330,331,5,110,0,0,331,332,5,101,0,0,332,445,5,100,0,0,333,334,
  	5,117,0,0,334,335,5,110,0,0,335,336,5,115,0,0,336,337,5,105,0,0,337,338,
  	5,103,0,0,338,339,5,110,0,0,339,340,5,101,0,0,340,445,5,100,0,0,341,342,
  	5,99,0,0,342,343,5,104,0,0,343,344,5,97,0,0,344,445,5,114,0,0,345,346,
  	5,115,0,0,346,347,5,116,0,0,347,348,5,114,0,0,348,349,5,105,0,0,349,350,
  	5,110,0,0,350,445,5,103,0,0,351,352,5,115,0,0,352,353,5,116,0,0,353,445,
  	5,114,0,0,354,355,5,118,0,0,355,356,5,111,0,0,356,357,5,105,0,0,357,445,
  	5,100,0,0,358,359,5,99,0,0,359,360,5,111,0,0,360,361,5,110,0,0,361,362,
  	5,115,0,0,362,445,5,116,0,0,363,364,5,115,0,0,364,365,5,116,0,0,365,366,
  	5,97,0,0,366,367,5,116,0,0,367,368,5,105,0,0,368,445,5,99,0,0,369,370,
  	5,118,0,0,370,371,5,111,0,0,371,372,5,108,0,0,372,373,5,97,0,0,373,374,
  	5,116,0,0,374,375,5,105,0,0,375,376,5,108,0,0,376,445,5,101,0,0,377,378,
  	5,114,0,0,378,379,5,101,0,0,379,380,5,103,0,0,380,381,5,105,0,0,381,382,
  	5,115,0,0,382,383,5,116,0,0,383,384,5,101,0,0,384,445,5,114,0,0,385,386,
  	5,102,0,0,386,387,5,105,0,0,387,388,5,110,0,0,388,389,5,97,0,0,389,445,
  	5,108,0,0,390,391,5,97,0,0,391,392,5,98,0,0,392,393,5,115,0,0,393,394,
  	5,116,0,0,394,395,5,114,0,0,395,396,5,97,0,0,396,397,5,99,0,0,397,445,
  	5,116,0,0,398,399,5,116,0,0,399,400,5,104,0,0,400,401,5,105,0,0,401,445,
  	5,115,0,0,402,403,5,115,0,0,403,404,5,101,0,0,404,405,5,108,0,0,405,445,
  	5,102,0,0,406,407,5,110,0,0,407,408,5,101,0,0,408,445,5,119,0,0,409,410,
  	5,100,0,0,410,411,5,101,0,0,411,412,5,108,0,0,412,413,5,101,0,0,413,414,
  	5,116,0,0,414,445,5,101,0,0,415,416,5,110,0,0,416,417,5,117,0,0,417,418,
  	5,108,0,0,418,445,5,108,0,0,419,420,5,110,0,0,420,421,5,117,0,0,421,422,
  	5,108,0,0,422,423,5,108,0,0,423,424,5,112,0,0,424,425,5,116,0,0,425,445,
  	5,114,0,0,426,427,5,116,0,0,427,428,5,114,0,0,428,429,5,117,0,0,429,445,
  	5,101,0,0,430,431,5,102,0,0,431,432,5,97,0,0,432,433,5,108,0,0,433,434,
  	5,115,0,0,434,445,5,101,0,0,435,436,5,84,0,0,436,437,5,114,0,0,437,438,
  	5,117,0,0,438,445,5,101,0,0,439,440,5,70,0,0,440,441,5,97,0,0,441,442,
  	5,108,0,0,442,443,5,115,0,0,443,445,5,101,0,0,444,311,1,0,0,0,444,314,
  	1,0,0,0,444,318,1,0,0,0,444,323,1,0,0,0,444,327,1,0,0,0,444,333,1,0,0,
  	0,444,341,1,0,0,0,444,345,1,0,0,0,444,351,1,0,0,0,444,354,1,0,0,0,444,
  	358,1,0,0,0,444,363,1,0,0,0,444,369,1,0,0,0,444,377,1,0,0,0,444,385,1,
  	0,0,0,444,390,1,0,0,0,444,398,1,0,0,0,444,402,1,0,0,0,444,406,1,0,0,0,
  	444,409,1,0,0,0,444,415,1,0,0,0,444,419,1,0,0,0,444,426,1,0,0,0,444,430,
  	1,0,0,0,444,435,1,0,0,0,444,439,1,0,0,0,445,56,1,0,0,0,446,447,5,116,
  	0,0,447,448,5,114,0,0,448,490,5,121,0,0,449,450,5,99,0,0,450,451,5,97,
  	0,0,451,452,5,116,0,0,452,453,5,99,0,0,453,490,5,104,0,0,454,455,5,116,
  	0,0,455,456,5,104,0,0,456,457,5,114,0,0,457,458,5,111,0,0,458,490,5,119,
  	0,0,459,460,5,116,0,0,460,461,5,104,0,0,461,462,5,114,0,0,462,463,5,111,
  	0,0,463,464,5,119,0,0,464,490,5,115,0,0,465,466,5,114,0,0,466,467,5,97,
  	0,0,467,468,5,105,0,0,468,469,5,115,0,0,469,490,5,101,0,0,470,471,5,102,
  	0,0,471,472,5,105,0,0,472,473,5,110,0,0,473,474,5,97,0,0,474,475,5,108,
  	0,0,475,476,5,108,0,0,476,490,5,121,0,0,477,478,5,97,0,0,478,479,5,115,
  	0,0,479,480,5,115,0,0,480,481,5,101,0,0,481,482,5,114,0,0,482,490,5,116,
  	0,0,483,484,5,101,0,0,484,485,5,120,0,0,485,486,5,99,0,0,486,487,5,101,
  	0,0,487,488,5,112,0,0,488,490,5,116,0,0,489,446,1,0,0,0,489,449,1,0,0,
  	0,489,454,1,0,0,0,489,459,1,0,0,0,489,465,1,0,0,0,489,470,1,0,0,0,489,
  	477,1,0,0,0,489,483,1,0,0,0,490,58,1,0,0,0,491,492,5,112,0,0,492,493,
  	5,117,0,0,493,494,5,98,0,0,494,495,5,108,0,0,495,496,5,105,0,0,496,528,
  	5,99,0,0,497,498,5,112,0,0,498,499,5,114,0,0,499,500,5,105,0,0,500,501,
  	5,118,0,0,501,502,5,97,0,0,502,503,5,116,0,0,503,528,5,101,0,0,504,505,
  	5,112,0,0,505,506,5,114,0,0,506,507,5,111,0,0,507,508,5,116,0,0,508,509,
  	5,101,0,0,509,510,5,99,0,0,510,511,5,116,0,0,511,512,5,101,0,0,512,528,
  	5,100,0,0,513,514,5,105,0,0,514,515,5,110,0,0,515,516,5,116,0,0,516,517,
  	5,101,0,0,517,518,5,114,0,0,518,519,5,110,0,0,519,520,5,97,0,0,520,528,
  	5,108,0,0,521,522,5,102,0,0,522,523,5,114,0,0,523,524,5,105,0,0,524,525,
  	5,101,0,0,525,526,5,110,0,0,526,528,5,100,0,0,527,491,1,0,0,0,527,497,
  	1,0,0,0,527,504,1,0,0,0,527,513,1,0,0,0,527,521,1,0,0,0,528,60,1,0,0,
  	0,529,530,5,111,0,0,530,531,5,112,0,0,531,532,5,101,0,0,532,533,5,114,
  	0,0,533,534,5,97,0,0,534,535,5,116,0,0,535,536,5,111,0,0,536,614,5,114,
  	0,0,537,538,5,105,0,0,538,539,5,110,0,0,539,540,5,108,0,0,540,541,5,105,
  	0,0,541,542,5,110,0,0,542,614,5,101,0,0,543,544,5,118,0,0,544,545,5,105,
  	0,0,545,546,5,114,0,0,546,547,5,116,0,0,547,548,5,117,0,0,548,549,5,97,
  	0,0,549,614,5,108,0,0,550,551,5,111,0,0,551,552,5,118,0,0,552,553,5,101,
  	0,0,553,554,5,114,0,0,554,555,5,114,0,0,555,556,5,105,0,0,556,557,5,100,
  	0,0,557,614,5,101,0,0,558,559,5,101,0,0,559,560,5,120,0,0,560,561,5,116,
  	0,0,561,562,5,101,0,0,562,563,5,114,0,0,563,614,5,110,0,0,564,565,5,115,
  	0,0,565,566,5,105,0,0,566,567,5,122,0,0,567,568,5,101,0,0,568,569,5,111,
  	0,0,569,614,5,102,0,0,570,571,5,97,0,0,571,572,5,119,0,0,572,573,5,97,
  	0,0,573,574,5,105,0,0,574,614,5,116,0,0,575,576,5,97,0,0,576,577,5,115,
  	0,0,577,578,5,121,0,0,578,579,5,110,0,0,579,614,5,99,0,0,580,581,5,119,
  	0,0,581,582,5,105,0,0,582,583,5,116,0,0,583,614,5,104,0,0,584,585,5,103,
  	0,0,585,586,5,108,0,0,586,587,5,111,0,0,587,588,5,98,0,0,588,589,5,97,
  	0,0,589,614,5,108,0,0,590,591,5,110,0,0,591,592,5,111,0,0,592,593,5,110,
  	0,0,593,594,5,108,0,0,594,595,5,111,0,0,595,596,5,99,0,0,596,597,5,97,
  	0,0,597,614,5,108,0,0,598,599,5,97,0,0,599,600,5,110,0,0,600,614,5,100,
  	0,0,601,602,5,111,0,0,602,614,5,114,0,0,603,604,5,110,0,0,604,605,5,111,
  	0,0,605,614,5,116,0,0,606,607,5,105,0,0,607,614,5,110,0,0,608,609,5,105,
  	0,0,609,614,5,115,0,0,610,611,5,100,0,0,611,612,5,101,0,0,612,614,5,108,
  	0,0,613,529,1,0,0,0,613,537,1,0,0,0,613,543,1,0,0,0,613,550,1,0,0,0,613,
  	558,1,0,0,0,613,564,1,0,0,0,613,570,1,0,0,0,613,575,1,0,0,0,613,580,1,
  	0,0,0,613,584,1,0,0,0,613,590,1,0,0,0,613,598,1,0,0,0,613,601,1,0,0,0,
  	613,603,1,0,0,0,613,606,1,0,0,0,613,608,1,0,0,0,613,610,1,0,0,0,614,62,
  	1,0,0,0,615,619,7,2,0,0,616,618,7,3,0,0,617,616,1,0,0,0,618,621,1,0,0,
  	0,619,617,1,0,0,0,619,620,1,0,0,0,620,64,1,0,0,0,621,619,1,0,0,0,9,0,
  	172,239,309,444,489,527,613,619,1,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  taskdeflanglexerLexerStaticData = std::move(staticData);
}

}

TaskDefLangLexer::TaskDefLangLexer(CharStream *input) : Lexer(input) {
  TaskDefLangLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *taskdeflanglexerLexerStaticData->atn, taskdeflanglexerLexerStaticData->decisionToDFA, taskdeflanglexerLexerStaticData->sharedContextCache);
}

TaskDefLangLexer::~TaskDefLangLexer() {
  delete _interpreter;
}

std::string TaskDefLangLexer::getGrammarFileName() const {
  return "TaskDefLang.g4";
}

const std::vector<std::string>& TaskDefLangLexer::getRuleNames() const {
  return taskdeflanglexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& TaskDefLangLexer::getChannelNames() const {
  return taskdeflanglexerLexerStaticData->channelNames;
}

const std::vector<std::string>& TaskDefLangLexer::getModeNames() const {
  return taskdeflanglexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& TaskDefLangLexer::getVocabulary() const {
  return taskdeflanglexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView TaskDefLangLexer::getSerializedATN() const {
  return taskdeflanglexerLexerStaticData->serializedATN;
}

const atn::ATN& TaskDefLangLexer::getATN() const {
  return *taskdeflanglexerLexerStaticData->atn;
}




void TaskDefLangLexer::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  taskdeflanglexerLexerInitialize();
#else
  ::antlr4::internal::call_once(taskdeflanglexerLexerOnceFlag, taskdeflanglexerLexerInitialize);
#endif
}
