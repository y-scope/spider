
#include <memory>
#include <utility>
#include <vector>

#include <spider/tdl/parser/ast/FloatSpec.hpp>
#include <spider/tdl/parser/ast/IntSpec.hpp>
#include <spider/tdl/parser/ast/nodes.hpp>
#include <spider/tdl/parser/Exception.hpp>
#include <spider/tdl/parser/SourceLocation.hpp>


// Generated from tdl/parser/TaskDefLang.g4 by ANTLR 4.13.2


#include "TaskDefLangLexer.h"


using namespace antlr4;

using namespace spider::tdl::parser::antlr_generated;


using namespace antlr4;

namespace {

struct TaskDefLangLexerStaticData final {
  TaskDefLangLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  TaskDefLangLexerStaticData(const TaskDefLangLexerStaticData&) = delete;
  TaskDefLangLexerStaticData(TaskDefLangLexerStaticData&&) = delete;
  TaskDefLangLexerStaticData& operator=(const TaskDefLangLexerStaticData&) = delete;
  TaskDefLangLexerStaticData& operator=(TaskDefLangLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag taskdeflanglexerLexerOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
std::unique_ptr<TaskDefLangLexerStaticData> taskdeflanglexerLexerStaticData = nullptr;

void taskdeflanglexerLexerInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (taskdeflanglexerLexerStaticData != nullptr) {
    return;
  }
#else
  assert(taskdeflanglexerLexerStaticData == nullptr);
#endif
  auto staticData = std::make_unique<TaskDefLangLexerStaticData>(
    std::vector<std::string>{
      "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
      "T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
      "T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "SPACE", "COMMENT", 
      "RESERVED_CONTROL_FLOW_WORDS", "RESERVED_DEF_WORDS", "RESERVED_TYPE_AND_STORAGE_WORDS", 
      "RESERVED_ERROR_HANDLING_WORDS", "RESERVED_ACCESS_CONTROL_WORDS", 
      "RESERVED_OTHER_WORDS", "ID"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'namespace'", "'{'", "'}'", "'fn'", "'('", "')'", "';'", "'->'", 
      "':'", "','", "'struct'", "'List'", "'<'", "'>'", "'Map'", "'Tuple'", 
      "'int8'", "'int16'", "'int32'", "'int64'", "'float'", "'double'", 
      "'bool'"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "SPACE", "COMMENT", "RESERVED_CONTROL_FLOW_WORDS", 
      "RESERVED_DEF_WORDS", "RESERVED_TYPE_AND_STORAGE_WORDS", "RESERVED_ERROR_HANDLING_WORDS", 
      "RESERVED_ACCESS_CONTROL_WORDS", "RESERVED_OTHER_WORDS", "ID"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,32,628,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
  	0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,7,
  	1,8,1,8,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,
  	1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,
  	1,15,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,
  	1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,
  	1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,
  	1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,5,24,171,8,24,10,24,12,24,174,
  	9,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,
  	1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,
  	1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,
  	1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,
  	1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,3,25,
  	244,8,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,
  	1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,
  	1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,
  	1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,
  	1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,
  	1,26,1,26,3,26,316,8,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,
  	1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,
  	1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,
  	1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,
  	1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,
  	1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,
  	1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,
  	1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,
  	1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,
  	1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,3,27,451,
  	8,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,
  	1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,
  	1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,
  	1,28,1,28,3,28,496,8,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,
  	1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,
  	1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,3,29,
  	534,8,29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,
  	1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,
  	1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,
  	1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,
  	1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,
  	1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,
  	1,30,1,30,3,30,620,8,30,1,31,1,31,5,31,624,8,31,10,31,12,31,627,9,31,
  	0,0,32,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,
  	27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,
  	25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,1,0,4,3,0,9,10,13,13,32,
  	32,2,0,10,10,13,13,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,
  	707,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,
  	1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,
  	0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,
  	0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,
  	1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,
  	0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,
  	1,65,1,0,0,0,3,75,1,0,0,0,5,77,1,0,0,0,7,79,1,0,0,0,9,82,1,0,0,0,11,84,
  	1,0,0,0,13,86,1,0,0,0,15,88,1,0,0,0,17,91,1,0,0,0,19,93,1,0,0,0,21,95,
  	1,0,0,0,23,102,1,0,0,0,25,107,1,0,0,0,27,109,1,0,0,0,29,111,1,0,0,0,31,
  	115,1,0,0,0,33,121,1,0,0,0,35,126,1,0,0,0,37,132,1,0,0,0,39,138,1,0,0,
  	0,41,144,1,0,0,0,43,150,1,0,0,0,45,157,1,0,0,0,47,162,1,0,0,0,49,166,
  	1,0,0,0,51,243,1,0,0,0,53,315,1,0,0,0,55,450,1,0,0,0,57,495,1,0,0,0,59,
  	533,1,0,0,0,61,619,1,0,0,0,63,621,1,0,0,0,65,66,5,110,0,0,66,67,5,97,
  	0,0,67,68,5,109,0,0,68,69,5,101,0,0,69,70,5,115,0,0,70,71,5,112,0,0,71,
  	72,5,97,0,0,72,73,5,99,0,0,73,74,5,101,0,0,74,2,1,0,0,0,75,76,5,123,0,
  	0,76,4,1,0,0,0,77,78,5,125,0,0,78,6,1,0,0,0,79,80,5,102,0,0,80,81,5,110,
  	0,0,81,8,1,0,0,0,82,83,5,40,0,0,83,10,1,0,0,0,84,85,5,41,0,0,85,12,1,
  	0,0,0,86,87,5,59,0,0,87,14,1,0,0,0,88,89,5,45,0,0,89,90,5,62,0,0,90,16,
  	1,0,0,0,91,92,5,58,0,0,92,18,1,0,0,0,93,94,5,44,0,0,94,20,1,0,0,0,95,
  	96,5,115,0,0,96,97,5,116,0,0,97,98,5,114,0,0,98,99,5,117,0,0,99,100,5,
  	99,0,0,100,101,5,116,0,0,101,22,1,0,0,0,102,103,5,76,0,0,103,104,5,105,
  	0,0,104,105,5,115,0,0,105,106,5,116,0,0,106,24,1,0,0,0,107,108,5,60,0,
  	0,108,26,1,0,0,0,109,110,5,62,0,0,110,28,1,0,0,0,111,112,5,77,0,0,112,
  	113,5,97,0,0,113,114,5,112,0,0,114,30,1,0,0,0,115,116,5,84,0,0,116,117,
  	5,117,0,0,117,118,5,112,0,0,118,119,5,108,0,0,119,120,5,101,0,0,120,32,
  	1,0,0,0,121,122,5,105,0,0,122,123,5,110,0,0,123,124,5,116,0,0,124,125,
  	5,56,0,0,125,34,1,0,0,0,126,127,5,105,0,0,127,128,5,110,0,0,128,129,5,
  	116,0,0,129,130,5,49,0,0,130,131,5,54,0,0,131,36,1,0,0,0,132,133,5,105,
  	0,0,133,134,5,110,0,0,134,135,5,116,0,0,135,136,5,51,0,0,136,137,5,50,
  	0,0,137,38,1,0,0,0,138,139,5,105,0,0,139,140,5,110,0,0,140,141,5,116,
  	0,0,141,142,5,54,0,0,142,143,5,52,0,0,143,40,1,0,0,0,144,145,5,102,0,
  	0,145,146,5,108,0,0,146,147,5,111,0,0,147,148,5,97,0,0,148,149,5,116,
  	0,0,149,42,1,0,0,0,150,151,5,100,0,0,151,152,5,111,0,0,152,153,5,117,
  	0,0,153,154,5,98,0,0,154,155,5,108,0,0,155,156,5,101,0,0,156,44,1,0,0,
  	0,157,158,5,98,0,0,158,159,5,111,0,0,159,160,5,111,0,0,160,161,5,108,
  	0,0,161,46,1,0,0,0,162,163,7,0,0,0,163,164,1,0,0,0,164,165,6,23,0,0,165,
  	48,1,0,0,0,166,167,5,47,0,0,167,168,5,47,0,0,168,172,1,0,0,0,169,171,
  	8,1,0,0,170,169,1,0,0,0,171,174,1,0,0,0,172,170,1,0,0,0,172,173,1,0,0,
  	0,173,175,1,0,0,0,174,172,1,0,0,0,175,176,6,24,0,0,176,50,1,0,0,0,177,
  	178,5,105,0,0,178,244,5,102,0,0,179,180,5,101,0,0,180,181,5,108,0,0,181,
  	182,5,115,0,0,182,244,5,101,0,0,183,184,5,101,0,0,184,185,5,108,0,0,185,
  	186,5,105,0,0,186,244,5,102,0,0,187,188,5,115,0,0,188,189,5,119,0,0,189,
  	190,5,105,0,0,190,191,5,116,0,0,191,192,5,99,0,0,192,244,5,104,0,0,193,
  	194,5,99,0,0,194,195,5,97,0,0,195,196,5,115,0,0,196,244,5,101,0,0,197,
  	198,5,119,0,0,198,199,5,104,0,0,199,200,5,105,0,0,200,201,5,108,0,0,201,
  	244,5,101,0,0,202,203,5,102,0,0,203,204,5,111,0,0,204,244,5,114,0,0,205,
  	206,5,108,0,0,206,207,5,111,0,0,207,208,5,111,0,0,208,244,5,112,0,0,209,
  	210,5,100,0,0,210,244,5,111,0,0,211,212,5,98,0,0,212,213,5,114,0,0,213,
  	214,5,101,0,0,214,215,5,97,0,0,215,244,5,107,0,0,216,217,5,99,0,0,217,
  	218,5,111,0,0,218,219,5,110,0,0,219,220,5,116,0,0,220,221,5,105,0,0,221,
  	222,5,110,0,0,222,223,5,117,0,0,223,244,5,101,0,0,224,225,5,114,0,0,225,
  	226,5,101,0,0,226,227,5,116,0,0,227,228,5,117,0,0,228,229,5,114,0,0,229,
  	244,5,110,0,0,230,231,5,103,0,0,231,232,5,111,0,0,232,233,5,116,0,0,233,
  	244,5,111,0,0,234,235,5,112,0,0,235,236,5,97,0,0,236,237,5,115,0,0,237,
  	244,5,115,0,0,238,239,5,121,0,0,239,240,5,105,0,0,240,241,5,101,0,0,241,
  	242,5,108,0,0,242,244,5,100,0,0,243,177,1,0,0,0,243,179,1,0,0,0,243,183,
  	1,0,0,0,243,187,1,0,0,0,243,193,1,0,0,0,243,197,1,0,0,0,243,202,1,0,0,
  	0,243,205,1,0,0,0,243,209,1,0,0,0,243,211,1,0,0,0,243,216,1,0,0,0,243,
  	224,1,0,0,0,243,230,1,0,0,0,243,234,1,0,0,0,243,238,1,0,0,0,244,52,1,
  	0,0,0,245,246,5,99,0,0,246,247,5,108,0,0,247,248,5,97,0,0,248,249,5,115,
  	0,0,249,316,5,115,0,0,250,251,5,115,0,0,251,252,5,116,0,0,252,253,5,114,
  	0,0,253,254,5,117,0,0,254,255,5,99,0,0,255,316,5,116,0,0,256,257,5,101,
  	0,0,257,258,5,110,0,0,258,259,5,117,0,0,259,316,5,109,0,0,260,261,5,117,
  	0,0,261,262,5,110,0,0,262,263,5,105,0,0,263,264,5,111,0,0,264,316,5,110,
  	0,0,265,266,5,105,0,0,266,267,5,110,0,0,267,268,5,116,0,0,268,269,5,101,
  	0,0,269,270,5,114,0,0,270,271,5,102,0,0,271,272,5,97,0,0,272,273,5,99,
  	0,0,273,316,5,101,0,0,274,275,5,110,0,0,275,276,5,97,0,0,276,277,5,109,
  	0,0,277,278,5,101,0,0,278,279,5,115,0,0,279,280,5,112,0,0,280,281,5,97,
  	0,0,281,282,5,99,0,0,282,316,5,101,0,0,283,284,5,117,0,0,284,285,5,115,
  	0,0,285,286,5,105,0,0,286,287,5,110,0,0,287,316,5,103,0,0,288,289,5,116,
  	0,0,289,290,5,121,0,0,290,291,5,112,0,0,291,292,5,101,0,0,292,293,5,100,
  	0,0,293,294,5,101,0,0,294,316,5,102,0,0,295,296,5,100,0,0,296,297,5,101,
  	0,0,297,316,5,102,0,0,298,299,5,102,0,0,299,316,5,110,0,0,300,301,5,108,
  	0,0,301,302,5,101,0,0,302,316,5,116,0,0,303,304,5,109,0,0,304,305,5,111,
  	0,0,305,306,5,100,0,0,306,307,5,117,0,0,307,308,5,108,0,0,308,316,5,101,
  	0,0,309,310,5,105,0,0,310,311,5,109,0,0,311,312,5,112,0,0,312,313,5,111,
  	0,0,313,314,5,114,0,0,314,316,5,116,0,0,315,245,1,0,0,0,315,250,1,0,0,
  	0,315,256,1,0,0,0,315,260,1,0,0,0,315,265,1,0,0,0,315,274,1,0,0,0,315,
  	283,1,0,0,0,315,288,1,0,0,0,315,295,1,0,0,0,315,298,1,0,0,0,315,300,1,
  	0,0,0,315,303,1,0,0,0,315,309,1,0,0,0,316,54,1,0,0,0,317,318,5,105,0,
  	0,318,319,5,110,0,0,319,451,5,116,0,0,320,321,5,108,0,0,321,322,5,111,
  	0,0,322,323,5,110,0,0,323,451,5,103,0,0,324,325,5,115,0,0,325,326,5,104,
  	0,0,326,327,5,111,0,0,327,328,5,114,0,0,328,451,5,116,0,0,329,330,5,98,
  	0,0,330,331,5,121,0,0,331,332,5,116,0,0,332,451,5,101,0,0,333,334,5,115,
  	0,0,334,335,5,105,0,0,335,336,5,103,0,0,336,337,5,110,0,0,337,338,5,101,
  	0,0,338,451,5,100,0,0,339,340,5,117,0,0,340,341,5,110,0,0,341,342,5,115,
  	0,0,342,343,5,105,0,0,343,344,5,103,0,0,344,345,5,110,0,0,345,346,5,101,
  	0,0,346,451,5,100,0,0,347,348,5,99,0,0,348,349,5,104,0,0,349,350,5,97,
  	0,0,350,451,5,114,0,0,351,352,5,115,0,0,352,353,5,116,0,0,353,354,5,114,
  	0,0,354,355,5,105,0,0,355,356,5,110,0,0,356,451,5,103,0,0,357,358,5,115,
  	0,0,358,359,5,116,0,0,359,451,5,114,0,0,360,361,5,118,0,0,361,362,5,111,
  	0,0,362,363,5,105,0,0,363,451,5,100,0,0,364,365,5,99,0,0,365,366,5,111,
  	0,0,366,367,5,110,0,0,367,368,5,115,0,0,368,451,5,116,0,0,369,370,5,115,
  	0,0,370,371,5,116,0,0,371,372,5,97,0,0,372,373,5,116,0,0,373,374,5,105,
  	0,0,374,451,5,99,0,0,375,376,5,118,0,0,376,377,5,111,0,0,377,378,5,108,
  	0,0,378,379,5,97,0,0,379,380,5,116,0,0,380,381,5,105,0,0,381,382,5,108,
  	0,0,382,451,5,101,0,0,383,384,5,114,0,0,384,385,5,101,0,0,385,386,5,103,
  	0,0,386,387,5,105,0,0,387,388,5,115,0,0,388,389,5,116,0,0,389,390,5,101,
  	0,0,390,451,5,114,0,0,391,392,5,102,0,0,392,393,5,105,0,0,393,394,5,110,
  	0,0,394,395,5,97,0,0,395,451,5,108,0,0,396,397,5,97,0,0,397,398,5,98,
  	0,0,398,399,5,115,0,0,399,400,5,116,0,0,400,401,5,114,0,0,401,402,5,97,
  	0,0,402,403,5,99,0,0,403,451,5,116,0,0,404,405,5,116,0,0,405,406,5,104,
  	0,0,406,407,5,105,0,0,407,451,5,115,0,0,408,409,5,115,0,0,409,410,5,101,
  	0,0,410,411,5,108,0,0,411,451,5,102,0,0,412,413,5,110,0,0,413,414,5,101,
  	0,0,414,451,5,119,0,0,415,416,5,100,0,0,416,417,5,101,0,0,417,418,5,108,
  	0,0,418,419,5,101,0,0,419,420,5,116,0,0,420,451,5,101,0,0,421,422,5,110,
  	0,0,422,423,5,117,0,0,423,424,5,108,0,0,424,451,5,108,0,0,425,426,5,110,
  	0,0,426,427,5,117,0,0,427,428,5,108,0,0,428,429,5,108,0,0,429,430,5,112,
  	0,0,430,431,5,116,0,0,431,451,5,114,0,0,432,433,5,116,0,0,433,434,5,114,
  	0,0,434,435,5,117,0,0,435,451,5,101,0,0,436,437,5,102,0,0,437,438,5,97,
  	0,0,438,439,5,108,0,0,439,440,5,115,0,0,440,451,5,101,0,0,441,442,5,84,
  	0,0,442,443,5,114,0,0,443,444,5,117,0,0,444,451,5,101,0,0,445,446,5,70,
  	0,0,446,447,5,97,0,0,447,448,5,108,0,0,448,449,5,115,0,0,449,451,5,101,
  	0,0,450,317,1,0,0,0,450,320,1,0,0,0,450,324,1,0,0,0,450,329,1,0,0,0,450,
  	333,1,0,0,0,450,339,1,0,0,0,450,347,1,0,0,0,450,351,1,0,0,0,450,357,1,
  	0,0,0,450,360,1,0,0,0,450,364,1,0,0,0,450,369,1,0,0,0,450,375,1,0,0,0,
  	450,383,1,0,0,0,450,391,1,0,0,0,450,396,1,0,0,0,450,404,1,0,0,0,450,408,
  	1,0,0,0,450,412,1,0,0,0,450,415,1,0,0,0,450,421,1,0,0,0,450,425,1,0,0,
  	0,450,432,1,0,0,0,450,436,1,0,0,0,450,441,1,0,0,0,450,445,1,0,0,0,451,
  	56,1,0,0,0,452,453,5,116,0,0,453,454,5,114,0,0,454,496,5,121,0,0,455,
  	456,5,99,0,0,456,457,5,97,0,0,457,458,5,116,0,0,458,459,5,99,0,0,459,
  	496,5,104,0,0,460,461,5,116,0,0,461,462,5,104,0,0,462,463,5,114,0,0,463,
  	464,5,111,0,0,464,496,5,119,0,0,465,466,5,116,0,0,466,467,5,104,0,0,467,
  	468,5,114,0,0,468,469,5,111,0,0,469,470,5,119,0,0,470,496,5,115,0,0,471,
  	472,5,114,0,0,472,473,5,97,0,0,473,474,5,105,0,0,474,475,5,115,0,0,475,
  	496,5,101,0,0,476,477,5,102,0,0,477,478,5,105,0,0,478,479,5,110,0,0,479,
  	480,5,97,0,0,480,481,5,108,0,0,481,482,5,108,0,0,482,496,5,121,0,0,483,
  	484,5,97,0,0,484,485,5,115,0,0,485,486,5,115,0,0,486,487,5,101,0,0,487,
  	488,5,114,0,0,488,496,5,116,0,0,489,490,5,101,0,0,490,491,5,120,0,0,491,
  	492,5,99,0,0,492,493,5,101,0,0,493,494,5,112,0,0,494,496,5,116,0,0,495,
  	452,1,0,0,0,495,455,1,0,0,0,495,460,1,0,0,0,495,465,1,0,0,0,495,471,1,
  	0,0,0,495,476,1,0,0,0,495,483,1,0,0,0,495,489,1,0,0,0,496,58,1,0,0,0,
  	497,498,5,112,0,0,498,499,5,117,0,0,499,500,5,98,0,0,500,501,5,108,0,
  	0,501,502,5,105,0,0,502,534,5,99,0,0,503,504,5,112,0,0,504,505,5,114,
  	0,0,505,506,5,105,0,0,506,507,5,118,0,0,507,508,5,97,0,0,508,509,5,116,
  	0,0,509,534,5,101,0,0,510,511,5,112,0,0,511,512,5,114,0,0,512,513,5,111,
  	0,0,513,514,5,116,0,0,514,515,5,101,0,0,515,516,5,99,0,0,516,517,5,116,
  	0,0,517,518,5,101,0,0,518,534,5,100,0,0,519,520,5,105,0,0,520,521,5,110,
  	0,0,521,522,5,116,0,0,522,523,5,101,0,0,523,524,5,114,0,0,524,525,5,110,
  	0,0,525,526,5,97,0,0,526,534,5,108,0,0,527,528,5,102,0,0,528,529,5,114,
  	0,0,529,530,5,105,0,0,530,531,5,101,0,0,531,532,5,110,0,0,532,534,5,100,
  	0,0,533,497,1,0,0,0,533,503,1,0,0,0,533,510,1,0,0,0,533,519,1,0,0,0,533,
  	527,1,0,0,0,534,60,1,0,0,0,535,536,5,111,0,0,536,537,5,112,0,0,537,538,
  	5,101,0,0,538,539,5,114,0,0,539,540,5,97,0,0,540,541,5,116,0,0,541,542,
  	5,111,0,0,542,620,5,114,0,0,543,544,5,105,0,0,544,545,5,110,0,0,545,546,
  	5,108,0,0,546,547,5,105,0,0,547,548,5,110,0,0,548,620,5,101,0,0,549,550,
  	5,118,0,0,550,551,5,105,0,0,551,552,5,114,0,0,552,553,5,116,0,0,553,554,
  	5,117,0,0,554,555,5,97,0,0,555,620,5,108,0,0,556,557,5,111,0,0,557,558,
  	5,118,0,0,558,559,5,101,0,0,559,560,5,114,0,0,560,561,5,114,0,0,561,562,
  	5,105,0,0,562,563,5,100,0,0,563,620,5,101,0,0,564,565,5,101,0,0,565,566,
  	5,120,0,0,566,567,5,116,0,0,567,568,5,101,0,0,568,569,5,114,0,0,569,620,
  	5,110,0,0,570,571,5,115,0,0,571,572,5,105,0,0,572,573,5,122,0,0,573,574,
  	5,101,0,0,574,575,5,111,0,0,575,620,5,102,0,0,576,577,5,97,0,0,577,578,
  	5,119,0,0,578,579,5,97,0,0,579,580,5,105,0,0,580,620,5,116,0,0,581,582,
  	5,97,0,0,582,583,5,115,0,0,583,584,5,121,0,0,584,585,5,110,0,0,585,620,
  	5,99,0,0,586,587,5,119,0,0,587,588,5,105,0,0,588,589,5,116,0,0,589,620,
  	5,104,0,0,590,591,5,103,0,0,591,592,5,108,0,0,592,593,5,111,0,0,593,594,
  	5,98,0,0,594,595,5,97,0,0,595,620,5,108,0,0,596,597,5,110,0,0,597,598,
  	5,111,0,0,598,599,5,110,0,0,599,600,5,108,0,0,600,601,5,111,0,0,601,602,
  	5,99,0,0,602,603,5,97,0,0,603,620,5,108,0,0,604,605,5,97,0,0,605,606,
  	5,110,0,0,606,620,5,100,0,0,607,608,5,111,0,0,608,620,5,114,0,0,609,610,
  	5,110,0,0,610,611,5,111,0,0,611,620,5,116,0,0,612,613,5,105,0,0,613,620,
  	5,110,0,0,614,615,5,105,0,0,615,620,5,115,0,0,616,617,5,100,0,0,617,618,
  	5,101,0,0,618,620,5,108,0,0,619,535,1,0,0,0,619,543,1,0,0,0,619,549,1,
  	0,0,0,619,556,1,0,0,0,619,564,1,0,0,0,619,570,1,0,0,0,619,576,1,0,0,0,
  	619,581,1,0,0,0,619,586,1,0,0,0,619,590,1,0,0,0,619,596,1,0,0,0,619,604,
  	1,0,0,0,619,607,1,0,0,0,619,609,1,0,0,0,619,612,1,0,0,0,619,614,1,0,0,
  	0,619,616,1,0,0,0,620,62,1,0,0,0,621,625,7,2,0,0,622,624,7,3,0,0,623,
  	622,1,0,0,0,624,627,1,0,0,0,625,623,1,0,0,0,625,626,1,0,0,0,626,64,1,
  	0,0,0,627,625,1,0,0,0,9,0,172,243,315,450,495,533,619,625,1,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  taskdeflanglexerLexerStaticData = std::move(staticData);
}

}

TaskDefLangLexer::TaskDefLangLexer(CharStream *input) : Lexer(input) {
  TaskDefLangLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *taskdeflanglexerLexerStaticData->atn, taskdeflanglexerLexerStaticData->decisionToDFA, taskdeflanglexerLexerStaticData->sharedContextCache);
}

TaskDefLangLexer::~TaskDefLangLexer() {
  delete _interpreter;
}

std::string TaskDefLangLexer::getGrammarFileName() const {
  return "TaskDefLang.g4";
}

const std::vector<std::string>& TaskDefLangLexer::getRuleNames() const {
  return taskdeflanglexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& TaskDefLangLexer::getChannelNames() const {
  return taskdeflanglexerLexerStaticData->channelNames;
}

const std::vector<std::string>& TaskDefLangLexer::getModeNames() const {
  return taskdeflanglexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& TaskDefLangLexer::getVocabulary() const {
  return taskdeflanglexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView TaskDefLangLexer::getSerializedATN() const {
  return taskdeflanglexerLexerStaticData->serializedATN;
}

const atn::ATN& TaskDefLangLexer::getATN() const {
  return *taskdeflanglexerLexerStaticData->atn;
}




void TaskDefLangLexer::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  taskdeflanglexerLexerInitialize();
#else
  ::antlr4::internal::call_once(taskdeflanglexerLexerOnceFlag, taskdeflanglexerLexerInitialize);
#endif
}
